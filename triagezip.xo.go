// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// TriageZip represents a row from 'agency_portal.TRIAGE_ZIP'.
type TriageZip struct {
	Zip         string    `json:"ZIP"`          // ZIP
	TriageUUID  []byte    `json:"TRIAGE_UUID"`  // TRIAGE_UUID
	WhenCreated time.Time `json:"WHEN_CREATED"` // WHEN_CREATED
	Tlm         time.Time `json:"TLM"`          // TLM

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TriageZip exists in the database.
func (tz *TriageZip) Exists() bool {
	return tz._exists
}

// Deleted provides information if the TriageZip has been deleted from the database.
func (tz *TriageZip) Deleted() bool {
	return tz._deleted
}

// Insert inserts the TriageZip to the database.
func (tz *TriageZip) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tz._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO agency_portal.TRIAGE_ZIP (` +
		`ZIP, TRIAGE_UUID, WHEN_CREATED, TLM` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tz.Zip, tz.TriageUUID, tz.WhenCreated, tz.Tlm)
	_, err = db.Exec(sqlstr, tz.Zip, tz.TriageUUID, tz.WhenCreated, tz.Tlm)
	if err != nil {
		return err
	}

	// set existence
	tz._exists = true

	return nil
}

// Update updates the TriageZip in the database.
func (tz *TriageZip) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tz._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tz._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE agency_portal.TRIAGE_ZIP SET ` +
		`TRIAGE_UUID = ?, WHEN_CREATED = ?, TLM = ?` +
		` WHERE ZIP = ?`

	// run query
	XOLog(sqlstr, tz.TriageUUID, tz.WhenCreated, tz.Tlm, tz.Zip)
	_, err = db.Exec(sqlstr, tz.TriageUUID, tz.WhenCreated, tz.Tlm, tz.Zip)
	return err
}

// Save saves the TriageZip to the database.
func (tz *TriageZip) Save(db XODB) error {
	if tz.Exists() {
		return tz.Update(db)
	}

	return tz.Insert(db)
}

// Delete deletes the TriageZip from the database.
func (tz *TriageZip) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tz._exists {
		return nil
	}

	// if deleted, bail
	if tz._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM agency_portal.TRIAGE_ZIP WHERE ZIP = ?`

	// run query
	XOLog(sqlstr, tz.Zip)
	_, err = db.Exec(sqlstr, tz.Zip)
	if err != nil {
		return err
	}

	// set deleted
	tz._deleted = true

	return nil
}

// Triage returns the Triage associated with the TriageZip's TriageUUID (TRIAGE_UUID).
//
// Generated from foreign key 'FK_TRIAGE_ZIP_TRIAGE_UUID'.
func (tz *TriageZip) Triage(db XODB) (*Triage, error) {
	return TriageByUUID(db, tz.TriageUUID)
}

// TriageZipsByTriageUUID retrieves a row from 'agency_portal.TRIAGE_ZIP' as a TriageZip.
//
// Generated from index 'FK_TRIAGE_ZIP_TRIAGE_UUID'.
func TriageZipsByTriageUUID(db XODB, triageUUID []byte) ([]*TriageZip, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ZIP, TRIAGE_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_ZIP ` +
		`WHERE TRIAGE_UUID = ?`

	// run query
	XOLog(sqlstr, triageUUID)
	q, err := db.Query(sqlstr, triageUUID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TriageZip{}
	for q.Next() {
		tz := TriageZip{
			_exists: true,
		}

		// scan
		err = q.Scan(&tz.Zip, &tz.TriageUUID, &tz.WhenCreated, &tz.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &tz)
	}

	return res, nil
}

// TriageZipsByTlm retrieves a row from 'agency_portal.TRIAGE_ZIP' as a TriageZip.
//
// Generated from index 'IX_TLM'.
func TriageZipsByTlm(db XODB, tlm time.Time) ([]*TriageZip, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ZIP, TRIAGE_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_ZIP ` +
		`WHERE TLM = ?`

	// run query
	XOLog(sqlstr, tlm)
	q, err := db.Query(sqlstr, tlm)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TriageZip{}
	for q.Next() {
		tz := TriageZip{
			_exists: true,
		}

		// scan
		err = q.Scan(&tz.Zip, &tz.TriageUUID, &tz.WhenCreated, &tz.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &tz)
	}

	return res, nil
}

// TriageZipByZip retrieves a row from 'agency_portal.TRIAGE_ZIP' as a TriageZip.
//
// Generated from index 'TRIAGE_ZIP_ZIP_pkey'.
func TriageZipByZip(db XODB, zip string) (*TriageZip, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ZIP, TRIAGE_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_ZIP ` +
		`WHERE ZIP = ?`

	// run query
	XOLog(sqlstr, zip)
	tz := TriageZip{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, zip).Scan(&tz.Zip, &tz.TriageUUID, &tz.WhenCreated, &tz.Tlm)
	if err != nil {
		return nil, err
	}

	return &tz, nil
}
