// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// BookingTriageTracker represents a row from 'agency_portal.BOOKING_TRIAGE_TRACKER'.
type BookingTriageTracker struct {
	UUID              []byte         `json:"UUID"`                 // UUID
	ProviderUUID      []byte         `json:"PROVIDER_UUID"`        // PROVIDER_UUID
	TriageOrder       sql.NullInt64  `json:"TRIAGE_ORDER"`         // TRIAGE_ORDER
	BookingUUID       []byte         `json:"BOOKING_UUID"`         // BOOKING_UUID
	TimeOfferedInMins sql.NullInt64  `json:"TIME_OFFERED_IN_MINS"` // TIME_OFFERED_IN_MINS
	TimerExecutionID  sql.NullString `json:"TIMER_EXECUTION_ID"`   // TIMER_EXECUTION_ID
	TimerExpiresAt    mysql.NullTime `json:"TIMER_EXPIRES_AT"`     // TIMER_EXPIRES_AT
	TrackingType      TrackingType   `json:"TRACKING_TYPE"`        // TRACKING_TYPE
	Status            Status         `json:"STATUS"`               // STATUS
	StatusTlm         time.Time      `json:"STATUS_TLM"`           // STATUS_TLM
	TriageCompleted   bool           `json:"TRIAGE_COMPLETED"`     // TRIAGE_COMPLETED
	WhenCreated       mysql.NullTime `json:"WHEN_CREATED"`         // WHEN_CREATED
	Tlm               time.Time      `json:"TLM"`                  // TLM

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BookingTriageTracker exists in the database.
func (btt *BookingTriageTracker) Exists() bool {
	return btt._exists
}

// Deleted provides information if the BookingTriageTracker has been deleted from the database.
func (btt *BookingTriageTracker) Deleted() bool {
	return btt._deleted
}

// Insert inserts the BookingTriageTracker to the database.
func (btt *BookingTriageTracker) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if btt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO agency_portal.BOOKING_TRIAGE_TRACKER (` +
		`UUID, PROVIDER_UUID, TRIAGE_ORDER, BOOKING_UUID, TIME_OFFERED_IN_MINS, TIMER_EXECUTION_ID, TIMER_EXPIRES_AT, TRACKING_TYPE, STATUS, STATUS_TLM, TRIAGE_COMPLETED, WHEN_CREATED, TLM` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, btt.UUID, btt.ProviderUUID, btt.TriageOrder, btt.BookingUUID, btt.TimeOfferedInMins, btt.TimerExecutionID, btt.TimerExpiresAt, btt.TrackingType, btt.Status, btt.StatusTlm, btt.TriageCompleted, btt.WhenCreated, btt.Tlm)
	_, err = db.Exec(sqlstr, btt.UUID, btt.ProviderUUID, btt.TriageOrder, btt.BookingUUID, btt.TimeOfferedInMins, btt.TimerExecutionID, btt.TimerExpiresAt, btt.TrackingType, btt.Status, btt.StatusTlm, btt.TriageCompleted, btt.WhenCreated, btt.Tlm)
	if err != nil {
		return err
	}

	// set existence
	btt._exists = true

	return nil
}

// Update updates the BookingTriageTracker in the database.
func (btt *BookingTriageTracker) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !btt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if btt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE agency_portal.BOOKING_TRIAGE_TRACKER SET ` +
		`PROVIDER_UUID = ?, TRIAGE_ORDER = ?, BOOKING_UUID = ?, TIME_OFFERED_IN_MINS = ?, TIMER_EXECUTION_ID = ?, TIMER_EXPIRES_AT = ?, TRACKING_TYPE = ?, STATUS = ?, STATUS_TLM = ?, TRIAGE_COMPLETED = ?, WHEN_CREATED = ?, TLM = ?` +
		` WHERE UUID = ?`

	// run query
	XOLog(sqlstr, btt.ProviderUUID, btt.TriageOrder, btt.BookingUUID, btt.TimeOfferedInMins, btt.TimerExecutionID, btt.TimerExpiresAt, btt.TrackingType, btt.Status, btt.StatusTlm, btt.TriageCompleted, btt.WhenCreated, btt.Tlm, btt.UUID)
	_, err = db.Exec(sqlstr, btt.ProviderUUID, btt.TriageOrder, btt.BookingUUID, btt.TimeOfferedInMins, btt.TimerExecutionID, btt.TimerExpiresAt, btt.TrackingType, btt.Status, btt.StatusTlm, btt.TriageCompleted, btt.WhenCreated, btt.Tlm, btt.UUID)
	return err
}

// Save saves the BookingTriageTracker to the database.
func (btt *BookingTriageTracker) Save(db XODB) error {
	if btt.Exists() {
		return btt.Update(db)
	}

	return btt.Insert(db)
}

// Delete deletes the BookingTriageTracker from the database.
func (btt *BookingTriageTracker) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !btt._exists {
		return nil
	}

	// if deleted, bail
	if btt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM agency_portal.BOOKING_TRIAGE_TRACKER WHERE UUID = ?`

	// run query
	XOLog(sqlstr, btt.UUID)
	_, err = db.Exec(sqlstr, btt.UUID)
	if err != nil {
		return err
	}

	// set deleted
	btt._deleted = true

	return nil
}

// Booking returns the Booking associated with the BookingTriageTracker's BookingUUID (BOOKING_UUID).
//
// Generated from foreign key 'FK_BOOKING_TRIAGE_TRACKER_BOOKING_BELONGS_TO'.
func (btt *BookingTriageTracker) Booking(db XODB) (*Booking, error) {
	return BookingByUUID(db, btt.BookingUUID)
}

// Provider returns the Provider associated with the BookingTriageTracker's ProviderUUID (PROVIDER_UUID).
//
// Generated from foreign key 'FK_BOOKING_TRIAGE_TRACKER_PROVIDER_BELONGS_TO'.
func (btt *BookingTriageTracker) Provider(db XODB) (*Provider, error) {
	return ProviderByUUID(db, btt.ProviderUUID)
}

// BookingTriageTrackerByUUID retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER' as a BookingTriageTracker.
//
// Generated from index 'BOOKING_TRIAGE_TRACKER_UUID_pkey'.
func BookingTriageTrackerByUUID(db XODB, uuid []byte) (*BookingTriageTracker, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, TRIAGE_ORDER, BOOKING_UUID, TIME_OFFERED_IN_MINS, TIMER_EXECUTION_ID, TIMER_EXPIRES_AT, TRACKING_TYPE, STATUS, STATUS_TLM, TRIAGE_COMPLETED, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER ` +
		`WHERE UUID = ?`

	// run query
	XOLog(sqlstr, uuid)
	btt := BookingTriageTracker{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&btt.UUID, &btt.ProviderUUID, &btt.TriageOrder, &btt.BookingUUID, &btt.TimeOfferedInMins, &btt.TimerExecutionID, &btt.TimerExpiresAt, &btt.TrackingType, &btt.Status, &btt.StatusTlm, &btt.TriageCompleted, &btt.WhenCreated, &btt.Tlm)
	if err != nil {
		return nil, err
	}

	return &btt, nil
}

// BookingTriageTrackersByProviderUUIDStatus retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER' as a BookingTriageTracker.
//
// Generated from index 'IX_PROVIDER_UUID_STATUS'.
func BookingTriageTrackersByProviderUUIDStatus(db XODB, providerUUID []byte, status Status) ([]*BookingTriageTracker, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, TRIAGE_ORDER, BOOKING_UUID, TIME_OFFERED_IN_MINS, TIMER_EXECUTION_ID, TIMER_EXPIRES_AT, TRACKING_TYPE, STATUS, STATUS_TLM, TRIAGE_COMPLETED, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER ` +
		`WHERE PROVIDER_UUID = ? AND STATUS = ?`

	// run query
	XOLog(sqlstr, providerUUID, status)
	q, err := db.Query(sqlstr, providerUUID, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageTracker{}
	for q.Next() {
		btt := BookingTriageTracker{
			_exists: true,
		}

		// scan
		err = q.Scan(&btt.UUID, &btt.ProviderUUID, &btt.TriageOrder, &btt.BookingUUID, &btt.TimeOfferedInMins, &btt.TimerExecutionID, &btt.TimerExpiresAt, &btt.TrackingType, &btt.Status, &btt.StatusTlm, &btt.TriageCompleted, &btt.WhenCreated, &btt.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &btt)
	}

	return res, nil
}

// BookingTriageTrackersByTimerExecutionID retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER' as a BookingTriageTracker.
//
// Generated from index 'IX_TIMER_EXECUTION_ID'.
func BookingTriageTrackersByTimerExecutionID(db XODB, timerExecutionID sql.NullString) ([]*BookingTriageTracker, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, TRIAGE_ORDER, BOOKING_UUID, TIME_OFFERED_IN_MINS, TIMER_EXECUTION_ID, TIMER_EXPIRES_AT, TRACKING_TYPE, STATUS, STATUS_TLM, TRIAGE_COMPLETED, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER ` +
		`WHERE TIMER_EXECUTION_ID = ?`

	// run query
	XOLog(sqlstr, timerExecutionID)
	q, err := db.Query(sqlstr, timerExecutionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageTracker{}
	for q.Next() {
		btt := BookingTriageTracker{
			_exists: true,
		}

		// scan
		err = q.Scan(&btt.UUID, &btt.ProviderUUID, &btt.TriageOrder, &btt.BookingUUID, &btt.TimeOfferedInMins, &btt.TimerExecutionID, &btt.TimerExpiresAt, &btt.TrackingType, &btt.Status, &btt.StatusTlm, &btt.TriageCompleted, &btt.WhenCreated, &btt.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &btt)
	}

	return res, nil
}

// BookingTriageTrackersByTlm retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER' as a BookingTriageTracker.
//
// Generated from index 'IX_TLM'.
func BookingTriageTrackersByTlm(db XODB, tlm time.Time) ([]*BookingTriageTracker, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, TRIAGE_ORDER, BOOKING_UUID, TIME_OFFERED_IN_MINS, TIMER_EXECUTION_ID, TIMER_EXPIRES_AT, TRACKING_TYPE, STATUS, STATUS_TLM, TRIAGE_COMPLETED, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER ` +
		`WHERE TLM = ?`

	// run query
	XOLog(sqlstr, tlm)
	q, err := db.Query(sqlstr, tlm)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageTracker{}
	for q.Next() {
		btt := BookingTriageTracker{
			_exists: true,
		}

		// scan
		err = q.Scan(&btt.UUID, &btt.ProviderUUID, &btt.TriageOrder, &btt.BookingUUID, &btt.TimeOfferedInMins, &btt.TimerExecutionID, &btt.TimerExpiresAt, &btt.TrackingType, &btt.Status, &btt.StatusTlm, &btt.TriageCompleted, &btt.WhenCreated, &btt.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &btt)
	}

	return res, nil
}

// BookingTriageTrackerByBookingUUID retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER' as a BookingTriageTracker.
//
// Generated from index 'UNQ_BOOKING_UUID'.
func BookingTriageTrackerByBookingUUID(db XODB, bookingUUID []byte) (*BookingTriageTracker, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, TRIAGE_ORDER, BOOKING_UUID, TIME_OFFERED_IN_MINS, TIMER_EXECUTION_ID, TIMER_EXPIRES_AT, TRACKING_TYPE, STATUS, STATUS_TLM, TRIAGE_COMPLETED, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER ` +
		`WHERE BOOKING_UUID = ?`

	// run query
	XOLog(sqlstr, bookingUUID)
	btt := BookingTriageTracker{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, bookingUUID).Scan(&btt.UUID, &btt.ProviderUUID, &btt.TriageOrder, &btt.BookingUUID, &btt.TimeOfferedInMins, &btt.TimerExecutionID, &btt.TimerExpiresAt, &btt.TrackingType, &btt.Status, &btt.StatusTlm, &btt.TriageCompleted, &btt.WhenCreated, &btt.Tlm)
	if err != nil {
		return nil, err
	}

	return &btt, nil
}
