// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Provider represents a row from 'agency_portal.PROVIDER'.
type Provider struct {
	UUID       []byte     `json:"UUID"`       // UUID
	Namespace  Namespace  `json:"NAMESPACE"`  // NAMESPACE
	Collection Collection `json:"COLLECTION"` // COLLECTION
	Metadata   JSON       `json:"METADATA"`   // METADATA

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Provider exists in the database.
func (p *Provider) Exists() bool {
	return p._exists
}

// Deleted provides information if the Provider has been deleted from the database.
func (p *Provider) Deleted() bool {
	return p._deleted
}

// Insert inserts the Provider to the database.
func (p *Provider) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO agency_portal.PROVIDER (` +
		`UUID, NAMESPACE, COLLECTION, METADATA` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.UUID, p.Namespace, p.Collection, p.Metadata)
	_, err = db.Exec(sqlstr, p.UUID, p.Namespace, p.Collection, p.Metadata)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Provider in the database.
func (p *Provider) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE agency_portal.PROVIDER SET ` +
		`NAMESPACE = ?, COLLECTION = ?, METADATA = ?` +
		` WHERE UUID = ?`

	// run query
	XOLog(sqlstr, p.Namespace, p.Collection, p.Metadata, p.UUID)
	_, err = db.Exec(sqlstr, p.Namespace, p.Collection, p.Metadata, p.UUID)
	return err
}

// Save saves the Provider to the database.
func (p *Provider) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Provider from the database.
func (p *Provider) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM agency_portal.PROVIDER WHERE UUID = ?`

	// run query
	XOLog(sqlstr, p.UUID)
	_, err = db.Exec(sqlstr, p.UUID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// ProviderByUUID retrieves a row from 'agency_portal.PROVIDER' as a Provider.
//
// Generated from index 'PROVIDER_UUID_pkey'.
func ProviderByUUID(db XODB, uuid []byte) (*Provider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, NAMESPACE, COLLECTION, METADATA ` +
		`FROM agency_portal.PROVIDER ` +
		`WHERE UUID = ?`

	// run query
	XOLog(sqlstr, uuid)
	p := Provider{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&p.UUID, &p.Namespace, &p.Collection, &p.Metadata)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
