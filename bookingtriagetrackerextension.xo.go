// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// BookingTriageTrackerExtension represents a row from 'agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION'.
type BookingTriageTrackerExtension struct {
	UUID                []byte         `json:"UUID"`                 // UUID
	ProviderUUID        []byte         `json:"PROVIDER_UUID"`        // PROVIDER_UUID
	BookingUUID         []byte         `json:"BOOKING_UUID"`         // BOOKING_UUID
	PermanentlyDeclined bool           `json:"PERMANENTLY_DECLINED"` // PERMANENTLY_DECLINED
	Notes               sql.NullString `json:"NOTES"`                // NOTES
	Source              Source         `json:"SOURCE"`               // SOURCE
	CsrUUID             []byte         `json:"CSR_UUID"`             // CSR_UUID
	WhenCreated         time.Time      `json:"WHEN_CREATED"`         // WHEN_CREATED
	Tlm                 time.Time      `json:"TLM"`                  // TLM

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BookingTriageTrackerExtension exists in the database.
func (btte *BookingTriageTrackerExtension) Exists() bool {
	return btte._exists
}

// Deleted provides information if the BookingTriageTrackerExtension has been deleted from the database.
func (btte *BookingTriageTrackerExtension) Deleted() bool {
	return btte._deleted
}

// Insert inserts the BookingTriageTrackerExtension to the database.
func (btte *BookingTriageTrackerExtension) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if btte._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION (` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, PERMANENTLY_DECLINED, NOTES, SOURCE, CSR_UUID, WHEN_CREATED, TLM` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, btte.UUID, btte.ProviderUUID, btte.BookingUUID, btte.PermanentlyDeclined, btte.Notes, btte.Source, btte.CsrUUID, btte.WhenCreated, btte.Tlm)
	_, err = db.Exec(sqlstr, btte.UUID, btte.ProviderUUID, btte.BookingUUID, btte.PermanentlyDeclined, btte.Notes, btte.Source, btte.CsrUUID, btte.WhenCreated, btte.Tlm)
	if err != nil {
		return err
	}

	// set existence
	btte._exists = true

	return nil
}

// Update updates the BookingTriageTrackerExtension in the database.
func (btte *BookingTriageTrackerExtension) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !btte._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if btte._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION SET ` +
		`PROVIDER_UUID = ?, BOOKING_UUID = ?, PERMANENTLY_DECLINED = ?, NOTES = ?, SOURCE = ?, CSR_UUID = ?, WHEN_CREATED = ?, TLM = ?` +
		` WHERE UUID = ?`

	// run query
	XOLog(sqlstr, btte.ProviderUUID, btte.BookingUUID, btte.PermanentlyDeclined, btte.Notes, btte.Source, btte.CsrUUID, btte.WhenCreated, btte.Tlm, btte.UUID)
	_, err = db.Exec(sqlstr, btte.ProviderUUID, btte.BookingUUID, btte.PermanentlyDeclined, btte.Notes, btte.Source, btte.CsrUUID, btte.WhenCreated, btte.Tlm, btte.UUID)
	return err
}

// Save saves the BookingTriageTrackerExtension to the database.
func (btte *BookingTriageTrackerExtension) Save(db XODB) error {
	if btte.Exists() {
		return btte.Update(db)
	}

	return btte.Insert(db)
}

// Delete deletes the BookingTriageTrackerExtension from the database.
func (btte *BookingTriageTrackerExtension) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !btte._exists {
		return nil
	}

	// if deleted, bail
	if btte._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION WHERE UUID = ?`

	// run query
	XOLog(sqlstr, btte.UUID)
	_, err = db.Exec(sqlstr, btte.UUID)
	if err != nil {
		return err
	}

	// set deleted
	btte._deleted = true

	return nil
}

// Booking returns the Booking associated with the BookingTriageTrackerExtension's BookingUUID (BOOKING_UUID).
//
// Generated from foreign key 'BOOKING_TRIAGE_TRACKER_EXTENSION_BOOKING_UUID_fk'.
func (btte *BookingTriageTrackerExtension) Booking(db XODB) (*Booking, error) {
	return BookingByUUID(db, btte.BookingUUID)
}

// Provider returns the Provider associated with the BookingTriageTrackerExtension's ProviderUUID (PROVIDER_UUID).
//
// Generated from foreign key 'BOOKING_TRIAGE_TRACKER_EXTENSION_PROVIDER_UUID'.
func (btte *BookingTriageTrackerExtension) Provider(db XODB) (*Provider, error) {
	return ProviderByUUID(db, btte.ProviderUUID)
}

// BookingTriageTrackerExtensionsByBookingUUID retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION' as a BookingTriageTrackerExtension.
//
// Generated from index 'BOOKING_TRIAGE_TRACKER_EXTENSION_BOOKING_UUID_fk'.
func BookingTriageTrackerExtensionsByBookingUUID(db XODB, bookingUUID []byte) ([]*BookingTriageTrackerExtension, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, PERMANENTLY_DECLINED, NOTES, SOURCE, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION ` +
		`WHERE BOOKING_UUID = ?`

	// run query
	XOLog(sqlstr, bookingUUID)
	q, err := db.Query(sqlstr, bookingUUID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageTrackerExtension{}
	for q.Next() {
		btte := BookingTriageTrackerExtension{
			_exists: true,
		}

		// scan
		err = q.Scan(&btte.UUID, &btte.ProviderUUID, &btte.BookingUUID, &btte.PermanentlyDeclined, &btte.Notes, &btte.Source, &btte.CsrUUID, &btte.WhenCreated, &btte.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &btte)
	}

	return res, nil
}

// BookingTriageTrackerExtensionByUUID retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION' as a BookingTriageTrackerExtension.
//
// Generated from index 'BOOKING_TRIAGE_TRACKER_EXTENSION_UUID_pkey'.
func BookingTriageTrackerExtensionByUUID(db XODB, uuid []byte) (*BookingTriageTrackerExtension, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, PERMANENTLY_DECLINED, NOTES, SOURCE, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION ` +
		`WHERE UUID = ?`

	// run query
	XOLog(sqlstr, uuid)
	btte := BookingTriageTrackerExtension{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&btte.UUID, &btte.ProviderUUID, &btte.BookingUUID, &btte.PermanentlyDeclined, &btte.Notes, &btte.Source, &btte.CsrUUID, &btte.WhenCreated, &btte.Tlm)
	if err != nil {
		return nil, err
	}

	return &btte, nil
}

// BookingTriageTrackerExtensionsByProviderUUIDPermanentlyDeclined retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION' as a BookingTriageTrackerExtension.
//
// Generated from index 'IX_PROVIDER_UUID_PERMANENTLY_DECLINED'.
func BookingTriageTrackerExtensionsByProviderUUIDPermanentlyDeclined(db XODB, providerUUID []byte, permanentlyDeclined bool) ([]*BookingTriageTrackerExtension, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, PERMANENTLY_DECLINED, NOTES, SOURCE, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION ` +
		`WHERE PROVIDER_UUID = ? AND PERMANENTLY_DECLINED = ?`

	// run query
	XOLog(sqlstr, providerUUID, permanentlyDeclined)
	q, err := db.Query(sqlstr, providerUUID, permanentlyDeclined)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageTrackerExtension{}
	for q.Next() {
		btte := BookingTriageTrackerExtension{
			_exists: true,
		}

		// scan
		err = q.Scan(&btte.UUID, &btte.ProviderUUID, &btte.BookingUUID, &btte.PermanentlyDeclined, &btte.Notes, &btte.Source, &btte.CsrUUID, &btte.WhenCreated, &btte.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &btte)
	}

	return res, nil
}

// BookingTriageTrackerExtensionsByTlm retrieves a row from 'agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION' as a BookingTriageTrackerExtension.
//
// Generated from index 'IX_TLM'.
func BookingTriageTrackerExtensionsByTlm(db XODB, tlm time.Time) ([]*BookingTriageTrackerExtension, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, PERMANENTLY_DECLINED, NOTES, SOURCE, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_TRACKER_EXTENSION ` +
		`WHERE TLM = ?`

	// run query
	XOLog(sqlstr, tlm)
	q, err := db.Query(sqlstr, tlm)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageTrackerExtension{}
	for q.Next() {
		btte := BookingTriageTrackerExtension{
			_exists: true,
		}

		// scan
		err = q.Scan(&btte.UUID, &btte.ProviderUUID, &btte.BookingUUID, &btte.PermanentlyDeclined, &btte.Notes, &btte.Source, &btte.CsrUUID, &btte.WhenCreated, &btte.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &btte)
	}

	return res, nil
}
