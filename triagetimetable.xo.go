// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// TriageTimeTable represents a row from 'agency_portal.TRIAGE_TIME_TABLE'.
type TriageTimeTable struct {
	UUID            []byte    `json:"UUID"`             // UUID
	TriageUUID      []byte    `json:"TRIAGE_UUID"`      // TRIAGE_UUID
	Order           int16     `json:"ORDER"`            // ORDER
	Status          Status    `json:"STATUS"`           // STATUS
	StatusTlm       time.Time `json:"STATUS_TLM"`       // STATUS_TLM
	AssignmentTimer JSON      `json:"ASSIGNMENT_TIMER"` // ASSIGNMENT_TIMER
	WhenCreated     time.Time `json:"WHEN_CREATED"`     // WHEN_CREATED
	Tlm             time.Time `json:"TLM"`              // TLM

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TriageTimeTable exists in the database.
func (ttt *TriageTimeTable) Exists() bool {
	return ttt._exists
}

// Deleted provides information if the TriageTimeTable has been deleted from the database.
func (ttt *TriageTimeTable) Deleted() bool {
	return ttt._deleted
}

// Insert inserts the TriageTimeTable to the database.
func (ttt *TriageTimeTable) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ttt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO agency_portal.TRIAGE_TIME_TABLE (` +
		`UUID, TRIAGE_UUID, ORDER, STATUS, STATUS_TLM, ASSIGNMENT_TIMER, WHEN_CREATED, TLM` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ttt.UUID, ttt.TriageUUID, ttt.Order, ttt.Status, ttt.StatusTlm, ttt.AssignmentTimer, ttt.WhenCreated, ttt.Tlm)
	_, err = db.Exec(sqlstr, ttt.UUID, ttt.TriageUUID, ttt.Order, ttt.Status, ttt.StatusTlm, ttt.AssignmentTimer, ttt.WhenCreated, ttt.Tlm)
	if err != nil {
		return err
	}

	// set existence
	ttt._exists = true

	return nil
}

// Update updates the TriageTimeTable in the database.
func (ttt *TriageTimeTable) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ttt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ttt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE agency_portal.TRIAGE_TIME_TABLE SET ` +
		`TRIAGE_UUID = ?, ORDER = ?, STATUS = ?, STATUS_TLM = ?, ASSIGNMENT_TIMER = ?, WHEN_CREATED = ?, TLM = ?` +
		` WHERE UUID = ?`

	// run query
	XOLog(sqlstr, ttt.TriageUUID, ttt.Order, ttt.Status, ttt.StatusTlm, ttt.AssignmentTimer, ttt.WhenCreated, ttt.Tlm, ttt.UUID)
	_, err = db.Exec(sqlstr, ttt.TriageUUID, ttt.Order, ttt.Status, ttt.StatusTlm, ttt.AssignmentTimer, ttt.WhenCreated, ttt.Tlm, ttt.UUID)
	return err
}

// Save saves the TriageTimeTable to the database.
func (ttt *TriageTimeTable) Save(db XODB) error {
	if ttt.Exists() {
		return ttt.Update(db)
	}

	return ttt.Insert(db)
}

// Delete deletes the TriageTimeTable from the database.
func (ttt *TriageTimeTable) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ttt._exists {
		return nil
	}

	// if deleted, bail
	if ttt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM agency_portal.TRIAGE_TIME_TABLE WHERE UUID = ?`

	// run query
	XOLog(sqlstr, ttt.UUID)
	_, err = db.Exec(sqlstr, ttt.UUID)
	if err != nil {
		return err
	}

	// set deleted
	ttt._deleted = true

	return nil
}

// Triage returns the Triage associated with the TriageTimeTable's TriageUUID (TRIAGE_UUID).
//
// Generated from foreign key 'FK_TRIAGE_TIME_TABLE_TRAIGE_UUID'.
func (ttt *TriageTimeTable) Triage(db XODB) (*Triage, error) {
	return TriageByUUID(db, ttt.TriageUUID)
}

// TriageTimeTablesByTlm retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE' as a TriageTimeTable.
//
// Generated from index 'IX_TLM'.
func TriageTimeTablesByTlm(db XODB, tlm time.Time) ([]*TriageTimeTable, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, TRIAGE_UUID, ORDER, STATUS, STATUS_TLM, ASSIGNMENT_TIMER, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE ` +
		`WHERE TLM = ?`

	// run query
	XOLog(sqlstr, tlm)
	q, err := db.Query(sqlstr, tlm)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TriageTimeTable{}
	for q.Next() {
		ttt := TriageTimeTable{
			_exists: true,
		}

		// scan
		err = q.Scan(&ttt.UUID, &ttt.TriageUUID, &ttt.Order, &ttt.Status, &ttt.StatusTlm, &ttt.AssignmentTimer, &ttt.WhenCreated, &ttt.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &ttt)
	}

	return res, nil
}

// TriageTimeTablesByTriageUUIDStatus retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE' as a TriageTimeTable.
//
// Generated from index 'IX_TRIAGE_UUID_STATUS'.
func TriageTimeTablesByTriageUUIDStatus(db XODB, triageUUID []byte, status Status) ([]*TriageTimeTable, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, TRIAGE_UUID, ORDER, STATUS, STATUS_TLM, ASSIGNMENT_TIMER, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE ` +
		`WHERE TRIAGE_UUID = ? AND STATUS = ?`

	// run query
	XOLog(sqlstr, triageUUID, status)
	q, err := db.Query(sqlstr, triageUUID, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TriageTimeTable{}
	for q.Next() {
		ttt := TriageTimeTable{
			_exists: true,
		}

		// scan
		err = q.Scan(&ttt.UUID, &ttt.TriageUUID, &ttt.Order, &ttt.Status, &ttt.StatusTlm, &ttt.AssignmentTimer, &ttt.WhenCreated, &ttt.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &ttt)
	}

	return res, nil
}

// TriageTimeTableByUUID retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE' as a TriageTimeTable.
//
// Generated from index 'TRIAGE_TIME_TABLE_UUID_pkey'.
func TriageTimeTableByUUID(db XODB, uuid []byte) (*TriageTimeTable, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, TRIAGE_UUID, ORDER, STATUS, STATUS_TLM, ASSIGNMENT_TIMER, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE ` +
		`WHERE UUID = ?`

	// run query
	XOLog(sqlstr, uuid)
	ttt := TriageTimeTable{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&ttt.UUID, &ttt.TriageUUID, &ttt.Order, &ttt.Status, &ttt.StatusTlm, &ttt.AssignmentTimer, &ttt.WhenCreated, &ttt.Tlm)
	if err != nil {
		return nil, err
	}

	return &ttt, nil
}

// TriageTimeTableByTriageUUIDOrder retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE' as a TriageTimeTable.
//
// Generated from index 'UNQ_TRIAGE_UUID_ORDER'.
func TriageTimeTableByTriageUUIDOrder(db XODB, triageUUID []byte, order int16) (*TriageTimeTable, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, TRIAGE_UUID, ORDER, STATUS, STATUS_TLM, ASSIGNMENT_TIMER, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE ` +
		`WHERE TRIAGE_UUID = ? AND ORDER = ?`

	// run query
	XOLog(sqlstr, triageUUID, order)
	ttt := TriageTimeTable{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, triageUUID, order).Scan(&ttt.UUID, &ttt.TriageUUID, &ttt.Order, &ttt.Status, &ttt.StatusTlm, &ttt.AssignmentTimer, &ttt.WhenCreated, &ttt.Tlm)
	if err != nil {
		return nil, err
	}

	return &ttt, nil
}
