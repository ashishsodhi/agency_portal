// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Action is the 'ACTION' enum type from schema 'agency_portal'.
type Action uint16

const (
	// ActionPendingAcceptance is the 'PENDING_ACCEPTANCE' Action.
	ActionPendingAcceptance = Action(1)

	// ActionAccepted is the 'ACCEPTED' Action.
	ActionAccepted = Action(2)

	// ActionDeclinedTriage is the 'DECLINED_TRIAGE' Action.
	ActionDeclinedTriage = Action(3)

	// ActionTriageTimedOut is the 'TRIAGE_TIMED_OUT' Action.
	ActionTriageTimedOut = Action(4)

	// ActionAssignmentTimedOut is the 'ASSIGNMENT_TIMED_OUT' Action.
	ActionAssignmentTimedOut = Action(5)

	// ActionDeclinedPermanently is the 'DECLINED_PERMANENTLY' Action.
	ActionDeclinedPermanently = Action(6)

	// ActionFulfilled is the 'FULFILLED' Action.
	ActionFulfilled = Action(7)
)

// String returns the string value of the Action.
func (a Action) String() string {
	var enumVal string

	switch a {
	case ActionPendingAcceptance:
		enumVal = "PENDING_ACCEPTANCE"

	case ActionAccepted:
		enumVal = "ACCEPTED"

	case ActionDeclinedTriage:
		enumVal = "DECLINED_TRIAGE"

	case ActionTriageTimedOut:
		enumVal = "TRIAGE_TIMED_OUT"

	case ActionAssignmentTimedOut:
		enumVal = "ASSIGNMENT_TIMED_OUT"

	case ActionDeclinedPermanently:
		enumVal = "DECLINED_PERMANENTLY"

	case ActionFulfilled:
		enumVal = "FULFILLED"
	}

	return enumVal
}

// MarshalText marshals Action into text.
func (a Action) MarshalText() ([]byte, error) {
	return []byte(a.String()), nil
}

// UnmarshalText unmarshals Action from text.
func (a *Action) UnmarshalText(text []byte) error {
	switch string(text) {
	case "PENDING_ACCEPTANCE":
		*a = ActionPendingAcceptance

	case "ACCEPTED":
		*a = ActionAccepted

	case "DECLINED_TRIAGE":
		*a = ActionDeclinedTriage

	case "TRIAGE_TIMED_OUT":
		*a = ActionTriageTimedOut

	case "ASSIGNMENT_TIMED_OUT":
		*a = ActionAssignmentTimedOut

	case "DECLINED_PERMANENTLY":
		*a = ActionDeclinedPermanently

	case "FULFILLED":
		*a = ActionFulfilled

	default:
		return errors.New("invalid Action")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Action.
func (a Action) Value() (driver.Value, error) {
	return a.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Action.
func (a *Action) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Action")
	}

	return a.UnmarshalText(buf)
}
