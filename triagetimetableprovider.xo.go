// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// TriageTimeTableProvider represents a row from 'agency_portal.TRIAGE_TIME_TABLE_PROVIDER'.
type TriageTimeTableProvider struct {
	TriageTimeTableUUID []byte    `json:"TRIAGE_TIME_TABLE_UUID"` // TRIAGE_TIME_TABLE_UUID
	ProviderUUID        []byte    `json:"PROVIDER_UUID"`          // PROVIDER_UUID
	Status              Status    `json:"STATUS"`                 // STATUS
	StatusTlm           time.Time `json:"STATUS_TLM"`             // STATUS_TLM
	WhenCreated         time.Time `json:"WHEN_CREATED"`           // WHEN_CREATED
	Tlm                 time.Time `json:"TLM"`                    // TLM

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TriageTimeTableProvider exists in the database.
func (tttp *TriageTimeTableProvider) Exists() bool {
	return tttp._exists
}

// Deleted provides information if the TriageTimeTableProvider has been deleted from the database.
func (tttp *TriageTimeTableProvider) Deleted() bool {
	return tttp._deleted
}

// Insert inserts the TriageTimeTableProvider to the database.
func (tttp *TriageTimeTableProvider) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tttp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO agency_portal.TRIAGE_TIME_TABLE_PROVIDER (` +
		`TRIAGE_TIME_TABLE_UUID, PROVIDER_UUID, STATUS, STATUS_TLM, WHEN_CREATED, TLM` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tttp.TriageTimeTableUUID, tttp.ProviderUUID, tttp.Status, tttp.StatusTlm, tttp.WhenCreated, tttp.Tlm)
	_, err = db.Exec(sqlstr, tttp.TriageTimeTableUUID, tttp.ProviderUUID, tttp.Status, tttp.StatusTlm, tttp.WhenCreated, tttp.Tlm)
	if err != nil {
		return err
	}

	// set existence
	tttp._exists = true

	return nil
}

// Update updates the TriageTimeTableProvider in the database.
func (tttp *TriageTimeTableProvider) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tttp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tttp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE agency_portal.TRIAGE_TIME_TABLE_PROVIDER SET ` +
		`PROVIDER_UUID = ?, STATUS = ?, STATUS_TLM = ?, WHEN_CREATED = ?, TLM = ?` +
		` WHERE TRIAGE_TIME_TABLE_UUID = ?`

	// run query
	XOLog(sqlstr, tttp.ProviderUUID, tttp.Status, tttp.StatusTlm, tttp.WhenCreated, tttp.Tlm, tttp.TriageTimeTableUUID)
	_, err = db.Exec(sqlstr, tttp.ProviderUUID, tttp.Status, tttp.StatusTlm, tttp.WhenCreated, tttp.Tlm, tttp.TriageTimeTableUUID)
	return err
}

// Save saves the TriageTimeTableProvider to the database.
func (tttp *TriageTimeTableProvider) Save(db XODB) error {
	if tttp.Exists() {
		return tttp.Update(db)
	}

	return tttp.Insert(db)
}

// Delete deletes the TriageTimeTableProvider from the database.
func (tttp *TriageTimeTableProvider) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tttp._exists {
		return nil
	}

	// if deleted, bail
	if tttp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM agency_portal.TRIAGE_TIME_TABLE_PROVIDER WHERE TRIAGE_TIME_TABLE_UUID = ?`

	// run query
	XOLog(sqlstr, tttp.TriageTimeTableUUID)
	_, err = db.Exec(sqlstr, tttp.TriageTimeTableUUID)
	if err != nil {
		return err
	}

	// set deleted
	tttp._deleted = true

	return nil
}

// TriageTimeTable returns the TriageTimeTable associated with the TriageTimeTableProvider's TriageTimeTableUUID (TRIAGE_TIME_TABLE_UUID).
//
// Generated from foreign key 'FK_TRIAGE_TIME_TABLE_PROVIDER_TIME_TABLE_UUID'.
func (tttp *TriageTimeTableProvider) TriageTimeTable(db XODB) (*TriageTimeTable, error) {
	return TriageTimeTableByUUID(db, tttp.TriageTimeTableUUID)
}

// Provider returns the Provider associated with the TriageTimeTableProvider's ProviderUUID (PROVIDER_UUID).
//
// Generated from foreign key 'FK_TRIAGE_TIME_TABLE_PROVIDER_UUID'.
func (tttp *TriageTimeTableProvider) Provider(db XODB) (*Provider, error) {
	return ProviderByUUID(db, tttp.ProviderUUID)
}

// TriageTimeTableProvidersByProviderUUID retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE_PROVIDER' as a TriageTimeTableProvider.
//
// Generated from index 'FK_TRIAGE_TIME_TABLE_PROVIDER_UUID'.
func TriageTimeTableProvidersByProviderUUID(db XODB, providerUUID []byte) ([]*TriageTimeTableProvider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`TRIAGE_TIME_TABLE_UUID, PROVIDER_UUID, STATUS, STATUS_TLM, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE_PROVIDER ` +
		`WHERE PROVIDER_UUID = ?`

	// run query
	XOLog(sqlstr, providerUUID)
	q, err := db.Query(sqlstr, providerUUID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TriageTimeTableProvider{}
	for q.Next() {
		tttp := TriageTimeTableProvider{
			_exists: true,
		}

		// scan
		err = q.Scan(&tttp.TriageTimeTableUUID, &tttp.ProviderUUID, &tttp.Status, &tttp.StatusTlm, &tttp.WhenCreated, &tttp.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &tttp)
	}

	return res, nil
}

// TriageTimeTableProvidersByTlm retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE_PROVIDER' as a TriageTimeTableProvider.
//
// Generated from index 'IX_TLM'.
func TriageTimeTableProvidersByTlm(db XODB, tlm time.Time) ([]*TriageTimeTableProvider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`TRIAGE_TIME_TABLE_UUID, PROVIDER_UUID, STATUS, STATUS_TLM, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE_PROVIDER ` +
		`WHERE TLM = ?`

	// run query
	XOLog(sqlstr, tlm)
	q, err := db.Query(sqlstr, tlm)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TriageTimeTableProvider{}
	for q.Next() {
		tttp := TriageTimeTableProvider{
			_exists: true,
		}

		// scan
		err = q.Scan(&tttp.TriageTimeTableUUID, &tttp.ProviderUUID, &tttp.Status, &tttp.StatusTlm, &tttp.WhenCreated, &tttp.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &tttp)
	}

	return res, nil
}

// TriageTimeTableProvidersByTriageTimeTableUUIDStatus retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE_PROVIDER' as a TriageTimeTableProvider.
//
// Generated from index 'IX_TRIAGE_TIME_TABLE_UUID_STATUS'.
func TriageTimeTableProvidersByTriageTimeTableUUIDStatus(db XODB, triageTimeTableUUID []byte, status Status) ([]*TriageTimeTableProvider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`TRIAGE_TIME_TABLE_UUID, PROVIDER_UUID, STATUS, STATUS_TLM, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE_PROVIDER ` +
		`WHERE TRIAGE_TIME_TABLE_UUID = ? AND STATUS = ?`

	// run query
	XOLog(sqlstr, triageTimeTableUUID, status)
	q, err := db.Query(sqlstr, triageTimeTableUUID, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TriageTimeTableProvider{}
	for q.Next() {
		tttp := TriageTimeTableProvider{
			_exists: true,
		}

		// scan
		err = q.Scan(&tttp.TriageTimeTableUUID, &tttp.ProviderUUID, &tttp.Status, &tttp.StatusTlm, &tttp.WhenCreated, &tttp.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &tttp)
	}

	return res, nil
}

// TriageTimeTableProviderByTriageTimeTableUUID retrieves a row from 'agency_portal.TRIAGE_TIME_TABLE_PROVIDER' as a TriageTimeTableProvider.
//
// Generated from index 'TRIAGE_TIME_TABLE_PROVIDER_TRIAGE_TIME_TABLE_UUID_pkey'.
func TriageTimeTableProviderByTriageTimeTableUUID(db XODB, triageTimeTableUUID []byte) (*TriageTimeTableProvider, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`TRIAGE_TIME_TABLE_UUID, PROVIDER_UUID, STATUS, STATUS_TLM, WHEN_CREATED, TLM ` +
		`FROM agency_portal.TRIAGE_TIME_TABLE_PROVIDER ` +
		`WHERE TRIAGE_TIME_TABLE_UUID = ?`

	// run query
	XOLog(sqlstr, triageTimeTableUUID)
	tttp := TriageTimeTableProvider{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, triageTimeTableUUID).Scan(&tttp.TriageTimeTableUUID, &tttp.ProviderUUID, &tttp.Status, &tttp.StatusTlm, &tttp.WhenCreated, &tttp.Tlm)
	if err != nil {
		return nil, err
	}

	return &tttp, nil
}
