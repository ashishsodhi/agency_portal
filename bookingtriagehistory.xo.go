// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// BookingTriageHistory represents a row from 'agency_portal.BOOKING_TRIAGE_HISTORY'.
type BookingTriageHistory struct {
	UUID         []byte    `json:"UUID"`          // UUID
	ProviderUUID []byte    `json:"PROVIDER_UUID"` // PROVIDER_UUID
	BookingUUID  []byte    `json:"BOOKING_UUID"`  // BOOKING_UUID
	Action       Action    `json:"ACTION"`        // ACTION
	UserUUID     []byte    `json:"USER_UUID"`     // USER_UUID
	CsrUUID      []byte    `json:"CSR_UUID"`      // CSR_UUID
	WhenCreated  time.Time `json:"WHEN_CREATED"`  // WHEN_CREATED
	Tlm          time.Time `json:"TLM"`           // TLM

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BookingTriageHistory exists in the database.
func (bth *BookingTriageHistory) Exists() bool {
	return bth._exists
}

// Deleted provides information if the BookingTriageHistory has been deleted from the database.
func (bth *BookingTriageHistory) Deleted() bool {
	return bth._deleted
}

// Insert inserts the BookingTriageHistory to the database.
func (bth *BookingTriageHistory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if bth._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO agency_portal.BOOKING_TRIAGE_HISTORY (` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, ACTION, USER_UUID, CSR_UUID, WHEN_CREATED, TLM` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, bth.UUID, bth.ProviderUUID, bth.BookingUUID, bth.Action, bth.UserUUID, bth.CsrUUID, bth.WhenCreated, bth.Tlm)
	_, err = db.Exec(sqlstr, bth.UUID, bth.ProviderUUID, bth.BookingUUID, bth.Action, bth.UserUUID, bth.CsrUUID, bth.WhenCreated, bth.Tlm)
	if err != nil {
		return err
	}

	// set existence
	bth._exists = true

	return nil
}

// Update updates the BookingTriageHistory in the database.
func (bth *BookingTriageHistory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bth._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if bth._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE agency_portal.BOOKING_TRIAGE_HISTORY SET ` +
		`PROVIDER_UUID = ?, BOOKING_UUID = ?, ACTION = ?, USER_UUID = ?, CSR_UUID = ?, WHEN_CREATED = ?, TLM = ?` +
		` WHERE UUID = ?`

	// run query
	XOLog(sqlstr, bth.ProviderUUID, bth.BookingUUID, bth.Action, bth.UserUUID, bth.CsrUUID, bth.WhenCreated, bth.Tlm, bth.UUID)
	_, err = db.Exec(sqlstr, bth.ProviderUUID, bth.BookingUUID, bth.Action, bth.UserUUID, bth.CsrUUID, bth.WhenCreated, bth.Tlm, bth.UUID)
	return err
}

// Save saves the BookingTriageHistory to the database.
func (bth *BookingTriageHistory) Save(db XODB) error {
	if bth.Exists() {
		return bth.Update(db)
	}

	return bth.Insert(db)
}

// Delete deletes the BookingTriageHistory from the database.
func (bth *BookingTriageHistory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !bth._exists {
		return nil
	}

	// if deleted, bail
	if bth._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM agency_portal.BOOKING_TRIAGE_HISTORY WHERE UUID = ?`

	// run query
	XOLog(sqlstr, bth.UUID)
	_, err = db.Exec(sqlstr, bth.UUID)
	if err != nil {
		return err
	}

	// set deleted
	bth._deleted = true

	return nil
}

// Provider returns the Provider associated with the BookingTriageHistory's ProviderUUID (PROVIDER_UUID).
//
// Generated from foreign key 'BOOKING_TRIAGE_HISTORY_PROVIDER_UUID_fk'.
func (bth *BookingTriageHistory) Provider(db XODB) (*Provider, error) {
	return ProviderByUUID(db, bth.ProviderUUID)
}

// Booking returns the Booking associated with the BookingTriageHistory's BookingUUID (BOOKING_UUID).
//
// Generated from foreign key 'FK_BOOKING_TRIAGE_HISTORY_BOOKING_TRIAGE_TRACKER'.
func (bth *BookingTriageHistory) Booking(db XODB) (*Booking, error) {
	return BookingByUUID(db, bth.BookingUUID)
}

// BookingTriageHistoriesByProviderUUID retrieves a row from 'agency_portal.BOOKING_TRIAGE_HISTORY' as a BookingTriageHistory.
//
// Generated from index 'BOOKING_TRIAGE_HISTORY_PROVIDER_UUID_fk'.
func BookingTriageHistoriesByProviderUUID(db XODB, providerUUID []byte) ([]*BookingTriageHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, ACTION, USER_UUID, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_HISTORY ` +
		`WHERE PROVIDER_UUID = ?`

	// run query
	XOLog(sqlstr, providerUUID)
	q, err := db.Query(sqlstr, providerUUID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageHistory{}
	for q.Next() {
		bth := BookingTriageHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&bth.UUID, &bth.ProviderUUID, &bth.BookingUUID, &bth.Action, &bth.UserUUID, &bth.CsrUUID, &bth.WhenCreated, &bth.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &bth)
	}

	return res, nil
}

// BookingTriageHistoryByUUID retrieves a row from 'agency_portal.BOOKING_TRIAGE_HISTORY' as a BookingTriageHistory.
//
// Generated from index 'BOOKING_TRIAGE_HISTORY_UUID_pkey'.
func BookingTriageHistoryByUUID(db XODB, uuid []byte) (*BookingTriageHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, ACTION, USER_UUID, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_HISTORY ` +
		`WHERE UUID = ?`

	// run query
	XOLog(sqlstr, uuid)
	bth := BookingTriageHistory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&bth.UUID, &bth.ProviderUUID, &bth.BookingUUID, &bth.Action, &bth.UserUUID, &bth.CsrUUID, &bth.WhenCreated, &bth.Tlm)
	if err != nil {
		return nil, err
	}

	return &bth, nil
}

// BookingTriageHistoriesByBookingUUID retrieves a row from 'agency_portal.BOOKING_TRIAGE_HISTORY' as a BookingTriageHistory.
//
// Generated from index 'FK_BOOKING_TRIAGE_HISTORY_BOOKING_TRIAGE_TRACKER'.
func BookingTriageHistoriesByBookingUUID(db XODB, bookingUUID []byte) ([]*BookingTriageHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, ACTION, USER_UUID, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_HISTORY ` +
		`WHERE BOOKING_UUID = ?`

	// run query
	XOLog(sqlstr, bookingUUID)
	q, err := db.Query(sqlstr, bookingUUID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageHistory{}
	for q.Next() {
		bth := BookingTriageHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&bth.UUID, &bth.ProviderUUID, &bth.BookingUUID, &bth.Action, &bth.UserUUID, &bth.CsrUUID, &bth.WhenCreated, &bth.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &bth)
	}

	return res, nil
}

// BookingTriageHistoriesByTlm retrieves a row from 'agency_portal.BOOKING_TRIAGE_HISTORY' as a BookingTriageHistory.
//
// Generated from index 'IX_TLM'.
func BookingTriageHistoriesByTlm(db XODB, tlm time.Time) ([]*BookingTriageHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UUID, PROVIDER_UUID, BOOKING_UUID, ACTION, USER_UUID, CSR_UUID, WHEN_CREATED, TLM ` +
		`FROM agency_portal.BOOKING_TRIAGE_HISTORY ` +
		`WHERE TLM = ?`

	// run query
	XOLog(sqlstr, tlm)
	q, err := db.Query(sqlstr, tlm)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*BookingTriageHistory{}
	for q.Next() {
		bth := BookingTriageHistory{
			_exists: true,
		}

		// scan
		err = q.Scan(&bth.UUID, &bth.ProviderUUID, &bth.BookingUUID, &bth.Action, &bth.UserUUID, &bth.CsrUUID, &bth.WhenCreated, &bth.Tlm)
		if err != nil {
			return nil, err
		}

		res = append(res, &bth)
	}

	return res, nil
}
