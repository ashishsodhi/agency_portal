// Package models contains the types for schema 'agency_portal'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// TrackingType is the 'TRACKING_TYPE' enum type from schema 'agency_portal'.
type TrackingType uint16

const (
	// TrackingTypeAcceptanceTimer is the 'ACCEPTANCE_TIMER' TrackingType.
	TrackingTypeAcceptanceTimer = TrackingType(1)

	// TrackingTypeAssignmentTimer is the 'ASSIGNMENT_TIMER' TrackingType.
	TrackingTypeAssignmentTimer = TrackingType(2)

	// TrackingTypeNoTimer is the 'NO_TIMER' TrackingType.
	TrackingTypeNoTimer = TrackingType(3)
)

// String returns the string value of the TrackingType.
func (tt TrackingType) String() string {
	var enumVal string

	switch tt {
	case TrackingTypeAcceptanceTimer:
		enumVal = "ACCEPTANCE_TIMER"

	case TrackingTypeAssignmentTimer:
		enumVal = "ASSIGNMENT_TIMER"

	case TrackingTypeNoTimer:
		enumVal = "NO_TIMER"
	}

	return enumVal
}

// MarshalText marshals TrackingType into text.
func (tt TrackingType) MarshalText() ([]byte, error) {
	return []byte(tt.String()), nil
}

// UnmarshalText unmarshals TrackingType from text.
func (tt *TrackingType) UnmarshalText(text []byte) error {
	switch string(text) {
	case "ACCEPTANCE_TIMER":
		*tt = TrackingTypeAcceptanceTimer

	case "ASSIGNMENT_TIMER":
		*tt = TrackingTypeAssignmentTimer

	case "NO_TIMER":
		*tt = TrackingTypeNoTimer

	default:
		return errors.New("invalid TrackingType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for TrackingType.
func (tt TrackingType) Value() (driver.Value, error) {
	return tt.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for TrackingType.
func (tt *TrackingType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid TrackingType")
	}

	return tt.UnmarshalText(buf)
}
